package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"leaderboard_service/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userName string, score int32) (*model.Leaderboard, error) {
	var user model.Leaderboard
	err := r.DB.QueryRow("INSERT INTO leaderboard (user_name, rank, score) VALUES ($1, $2, $3) RETURNING user_id, user_name, rank, score", userName, 0, score).Scan(&user.UserID, &user.UserName, &user.Rank, &user.Score)
	if err != nil {
		return nil, err
	}
	// Update the ranks after adding the new user
	updateRanks(r.DB)
	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID string, userName *string, score *int32) (*model.Leaderboard, error) {
	if userName != nil {
		_, err := r.DB.Exec("UPDATE leaderboard SET user_name = $1 WHERE user_id = $2", *userName, userID)
		if err != nil {
			return nil, err
		}
	}
	if score != nil {
		_, err := r.DB.Exec("UPDATE leaderboard SET score = $1 WHERE user_id = $2", *score, userID)
		if err != nil {
			return nil, err
		}
	}
	// Update the ranks after modifying the user
	updateRanks(r.DB)

	var user model.Leaderboard
	err := r.DB.QueryRow("SELECT user_id, user_name, rank, score FROM leaderboard WHERE user_id = $1", userID).Scan(&user.UserID, &user.UserName, &user.Rank, &user.Score)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (bool, error) {
	_, err := r.DB.Exec("DELETE FROM leaderboard WHERE user_id = $1", userID)
	if err != nil {
		return false, err
	}
	// Update the ranks after deleting the user
	updateRanks(r.DB)
	return true, nil
}

// Leaderboard is the resolver for the leaderboard field.
func (r *queryResolver) Leaderboard(ctx context.Context) ([]*model.Leaderboard, error) {
	rows, err := r.DB.Query("SELECT user_id, user_name, rank, score FROM leaderboard ORDER BY rank")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var leaderboard []*model.Leaderboard
	for rows.Next() {
		var user model.Leaderboard
		if err := rows.Scan(&user.UserID, &user.UserName, &user.Rank, &user.Score); err != nil {
			return nil, err
		}
		leaderboard = append(leaderboard, &user)
	}

	return leaderboard, nil
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, userID string) (*model.Leaderboard, error) {
	var user model.Leaderboard
	err := r.DB.QueryRow("SELECT user_id, user_name, rank, score FROM leaderboard WHERE user_id = $1", userID).Scan(&user.UserID, &user.UserName, &user.Rank, &user.Score)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
